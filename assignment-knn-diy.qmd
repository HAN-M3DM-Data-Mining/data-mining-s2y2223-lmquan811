---
title: "Assigment - KNN DIY"
author:
- Le Minh Quan - Author
- Maximilian - Reviewer
date: "`r format(Sys.time(), '%d %B, %Y')`"
output:
  html_notebook:
  toc: true
  toc_depth: 2
---

```{r}
library(readr)
library(tidyverse)
library(tm)
library(caret)
library(wordcloud)
library(e1071)
library(creditmodel)
```

## Business Understanding

This KNN model is launched to detect the possibility of getting diabetes
among a specific amount of people to preventing it

## Data Understanding

Accessing to the data

```{r}
rawDF <- read_csv("./datasets/KNN-diabetes.csv")
```

The str() function will return the selected object to a string format.

```{r}
str(rawDF)
```

## Data Preparation

The Data consist all of the important factor, thereby we won't deleting anything (but will select them later)

```{r}
cleanDF <- rawDF 
head(cleanDF)
```

We counting the outcomes to see how many patients with Diabetes or with No Diabetes and the percentage

```{r}
cntOutc <- table(cleanDF$Outcome) 
propOutc <- round(prop.table(cntOutc) * 100 , digits = 1)

cntOutc 
propOutc
```



```{r}
cleanDF$Outcome <- factor(cleanDF$Outcome, levels = c("0", "1"), labels = c("No Diabetes", "Diabetes")) %>% relevel("Diabetes") 
head(cleanDF,10)
```

```{r}
summary(cleanDF[c("Glucose", "Pregnancies", "BMI", "BloodPressure",
"DiabetesPedigreeFunction")])
```


```{r}
normalize <- function(x) { return ((x - min(x)) / (max(x) - min(x))) }

cleanDF_n <- sapply(1:8, function(x) { normalize(cleanDF[,x]) }) %>% as.data.frame() 
colnames(cleanDF_n) <- colnames(cleanDF)[1:8]

summary(cleanDF_n[c("Glucose", "Pregnancies", "BMI", "BloodPressure",
"DiabetesPedigreeFunction")])
```

```{r}
test <- train_test_split(cleanDF)[[1]]
train <- train_test_split(cleanDF)[[2]]

test_feat <- test[-9]
train_feat <- train[-9]

test_labels <- test[, 9]
train_labels <- train[,9]
```

## Modeling
```{r}
library(class)
cleanDF_test_pred <- knn(train = as.matrix(train_feat), test = as.matrix(test_feat), cl = as.matrix(train_labels), k=10)
head(cleanDF_test_pred)
```

```{r}
confusionMatrix(cleanDF_test_pred, test_labels[[1]], positive = NULL,
dnn = c("Prediction", "True"))
```

## Evaluation and Deployment

reviewer adds suggestions for improving the model
